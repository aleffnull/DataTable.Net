<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArithmeticTypeUnknownMember" xml:space="preserve">
    <value>Unknown ArithmeticType member: {0}.</value>
    <comment>0 is enumeration value</comment>
  </data>
  <data name="BytesCountNotSpecified" xml:space="preserve">
    <value>BytesCount is not specified.</value>
  </data>
  <data name="LoadingSettings" xml:space="preserve">
    <value>Loading settings</value>
  </data>
  <data name="OpeningFile" xml:space="preserve">
    <value>Opening file '{0}'</value>
    <comment>0 is file path</comment>
  </data>
  <data name="NoDataPropertiesOpeningCanceled" xml:space="preserve">
    <value>No data properties. Opening was canceled.</value>
  </data>
  <data name="GotDataProperties" xml:space="preserve">
    <value>Got data properties: {0}</value>
    <comment>0 is data properties string</comment>
  </data>
  <data name="ExportingToFile" xml:space="preserve">
    <value>Exporting to file '{0}'</value>
    <comment>0 is file path</comment>
  </data>
  <data name="ReloadingFileWithNewDataProperties" xml:space="preserve">
    <value>Reloading file '{0}' with new data properties '{1}'</value>
    <comment>0 is file path, 1 is data properties string
		</comment>
  </data>
  <data name="ChangingSettingsFromTo" xml:space="preserve">
    <value>Changing settings from '{0}' to '{1}'</value>
    <comment>0 is old settings string, 1 is new settings string</comment>
  </data>
  <data name="DataError" xml:space="preserve">
    <value>Data error</value>
  </data>
  <data name="SettingsLoadingFinished" xml:space="preserve">
    <value>Settings loading finished</value>
  </data>
  <data name="DataWasLoadedSuccessfully" xml:space="preserve">
    <value>Data was loaded successfully</value>
  </data>
  <data name="ExportToFileWasFinishedSuccessfully" xml:space="preserve">
    <value>Export to file was finished successfully</value>
  </data>
  <data name="ReloadingFileWithDataPropertiesModel" xml:space="preserve">
    <value>Reloading file '{0}' with data properties model: {1}</value>
    <comment>0 is file path, 1 is data properties model string</comment>
  </data>
  <data name="MachineArgumentSingleColumnTitle" xml:space="preserve">
    <value>[X]</value>
  </data>
  <data name="MachineArgumentMultipleColumnTitle" xml:space="preserve">
    <value>[X{0}]</value>
    <comment>0 is argument number</comment>
  </data>
  <data name="MachineFunctionSingleColumnTitle" xml:space="preserve">
    <value>[Y]</value>
  </data>
  <data name="MachineFunctionMultipleColumnTitle" xml:space="preserve">
    <value>[Y{0}]</value>
  </data>
  <data name="HumanArgumentSingleColumnTitle" xml:space="preserve">
    <value>X</value>
  </data>
  <data name="HumanArgumentMultipleColumnTitle" xml:space="preserve">
    <value>X{0}</value>
    <comment>0 is column number</comment>
  </data>
  <data name="HumanFunctiontSingleColumnTitle" xml:space="preserve">
    <value>Y</value>
  </data>
  <data name="HumanFunctionMultipleColumnTitle" xml:space="preserve">
    <value>Y{0}</value>
  </data>
  <data name="ScaleDtoValueMember" xml:space="preserve">
    <value>Scale</value>
  </data>
  <data name="ScaleDtoDisplayMember" xml:space="preserve">
    <value>ScaleString</value>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File '{0}' doesn't exist</value>
    <comment>0 is file path</comment>
  </data>
  <data name="ApplicationStarted" xml:space="preserve">
    <value>Application started</value>
  </data>
  <data name="ApplicationClosed" xml:space="preserve">
    <value>Application closed</value>
  </data>
  <data name="ApplicationTerminated" xml:space="preserve">
    <value>Application terminated</value>
  </data>
  <data name="FailedToShowExceptionWindow" xml:space="preserve">
    <value>Failed to show exception window</value>
  </data>
  <data name="SettingsStorageToStringFormat" xml:space="preserve">
    <value>MaxAbsoluteScalePower = {0}, ExportValuesSeparator = "{1}", RecentFilesCount = {2} RegisteredExtensions = {3}</value>
  </data>
  <data name="DataPropertiesDtoToStringFormat" xml:space="preserve">
    <value>Number of arguments: {0}, number of functions: {1}, agruments type: {2}, functions type: {3}, arithmetic type: {4}</value>
    <comment>0 is number of arguments, 1 is number of fuctions, 2 is arguments type, 3 is functions type, 4 is arithmetic type</comment>
  </data>
  <data name="ScaleDtoScaleStringFormat" xml:space="preserve">
    <value>2^{0}</value>
    <comment>0 is power index</comment>
  </data>
  <data name="ByteToHexFormat" xml:space="preserve">
    <value>X2</value>
  </data>
  <data name="SyncContextControlToSendToField" xml:space="preserve">
    <value>controlToSendTo</value>
  </data>
  <data name="DataTypeUnknownMember" xml:space="preserve">
    <value>Unknown DataType member: {0}</value>
    <comment>0 is enumeration value</comment>
  </data>
  <data name="InsufficientBytesRead" xml:space="preserve">
    <value>Read {0} bytes while {1} was expected</value>
    <comment>0 is actual read bytes count, 1 is expected bytes count.</comment>
  </data>
  <data name="ExportingToExcel" xml:space="preserve">
    <value>Exporting to Excel</value>
  </data>
  <data name="ExportToExcelWasFinishedSuccessfully" xml:space="preserve">
    <value>Export to Excel was finished successfully</value>
  </data>
  <data name="DataLineItemsCountDoesNotMatchColumnCount" xml:space="preserve">
    <value>Data line items count {0} doesn't match column count {1}</value>
    <comment>0 is data line items count, 1 is column count</comment>
  </data>
  <data name="CurrentRowIndexIsTooBigForRowCount" xml:space="preserve">
    <value>Current row index {0} is too big for row count {1}</value>
    <comment>0 is current row index, 1 is row count.</comment>
  </data>
  <data name="ContactEmailLink" xml:space="preserve">
    <value>mailto:datatable.net@blackbox82.org</value>
  </data>
  <data name="DataPropertiesDtoScalesToStringFormat" xml:space="preserve">
    <value>Number of arguments: {0}, number of functions: {1}, agruments type: {2}, functions type: {3}, arithmetic type: {4}, argument scales: {5}, function scales: {6}</value>
    <comment>0 is number of arguments, 1 is number of fuctions, 2 is arguments type, 3 is functions type, 4 is arithmetic type, 5 is argument scales string, 6 is fuction scales string</comment>
  </data>
  <data name="RegistrySettingsNoExtensions" xml:space="preserve">
    <value>no extensions</value>
  </data>
  <data name="ExtensionsSeparator" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="DatExtension" xml:space="preserve">
    <value>dat</value>
  </data>
  <data name="HexExtension" xml:space="preserve">
    <value>hex</value>
  </data>
  <data name="BinExtension" xml:space="preserve">
    <value>bin</value>
  </data>
  <data name="CreatedFileAssociation" xml:space="preserve">
    <value>Created FileAssociation object for '{0}' extension</value>
    <comment>0 is dotted extension</comment>
  </data>
  <data name="SoftwareClasses" xml:space="preserve">
    <value>Software\Classes\{0}\</value>
    <comment>0 is key name</comment>
  </data>
  <data name="KeyNotExists" xml:space="preserve">
    <value>Key '{0}' doesn't exist</value>
    <comment>0 is key path</comment>
  </data>
  <data name="KeyValueIsNullOrEmpty" xml:space="preserve">
    <value>Value of key '{0}' is null or empty</value>
    <comment>0 is key path</comment>
  </data>
  <data name="OpenCommandIs" xml:space="preserve">
    <value>Open command is '{0}'</value>
    <comment>0 is Open command</comment>
  </data>
  <data name="AssociationExists" xml:space="preserve">
    <value>Association exists</value>
  </data>
  <data name="AssociationNotExists" xml:space="preserve">
    <value>Association doesn't exist</value>
  </data>
  <data name="CheckingIfAssociationExists" xml:space="preserve">
    <value>Checking if association exists</value>
  </data>
  <data name="RemovingAssociation" xml:space="preserve">
    <value>Removing association</value>
  </data>
  <data name="DeletingKey" xml:space="preserve">
    <value>Deleting key '{0}'</value>
    <comment>0 is key path</comment>
  </data>
  <data name="SettingOpeningProgram" xml:space="preserve">
    <value>Setting opening program to '{0}'</value>
    <comment>0 is path to executable</comment>
  </data>
  <data name="OpenCommandPath" xml:space="preserve">
    <value>shell\open\command</value>
  </data>
  <data name="OpenCommandFormat" xml:space="preserve">
    <value>"{0}" "%1"</value>
    <comment>0 is path to program executable	</comment>
  </data>
  <data name="GotFileFromCommandLine" xml:space="preserve">
    <value>Got file '{0}' from command line</value>
    <comment>0 is file path</comment>
  </data>
  <data name="DefaultIcon" xml:space="preserve">
    <value>DefaultIcon</value>
  </data>
  <data name="DefaultIconFormat" xml:space="preserve">
    <value>"{0}"</value>
    <comment>0 is path to icon</comment>
  </data>
  <data name="FileIcon" xml:space="preserve">
    <value>file.ico</value>
  </data>
  <data name="RecentFileDtoToStringFormat" xml:space="preserve">
    <value>{0} [{1}]</value>
    <comment>0 is file name. 1 is full path</comment>
  </data>
  <data name="FailedToSaveFileInRecentFilesList" xml:space="preserve">
    <value>Не удалось сохранить файл в списке недавно открытых. {0}</value>
    <comment>0 is exception message</comment>
  </data>
  <data name="ProgramName" xml:space="preserve">
    <value>DataTable.Net</value>
  </data>
  <data name="SoftwareRecentFiles" xml:space="preserve">
    <value>Software\{0}\RecentFiles</value>
    <comment>0 is program name</comment>
  </data>
  <data name="CountValueName" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="ItemValueName" xml:space="preserve">
    <value>Item{0}</value>
    <comment>0 is current item index</comment>
  </data>
  <data name="ClearingRecentFilesList" xml:space="preserve">
    <value>Clearing recent files list</value>
  </data>
  <data name="FailedToClearRecentFilesList" xml:space="preserve">
    <value>Не удалось очистить список последних файлов. {0}</value>
    <comment>0 is exception message</comment>
  </data>
  <data name="CreatingOrOpeningKey" xml:space="preserve">
    <value>Creating or opening key '{0}'</value>
    <comment>0 is key path</comment>
  </data>
  <data name="OpeningKeyReadOnly" xml:space="preserve">
    <value>Opening key '{0}' as read-only</value>
    <comment>0 is key path</comment>
  </data>
  <data name="GettingKeyValue" xml:space="preserve">
    <value>Getting value of key '{0}' with name '{1}'</value>
    <comment>0 is key path, 1 is value name</comment>
  </data>
  <data name="GotValue" xml:space="preserve">
    <value>Got value '{0}'</value>
    <comment>0 is key value</comment>
  </data>
  <data name="SettingKeyValue" xml:space="preserve">
    <value>Setting value of key '{0}' with name '{1}' to '{2}'</value>
    <comment>0 is key, 1 is value name, 2 is value itself</comment>
  </data>
  <data name="AddingItem" xml:space="preserve">
    <value>Adding item '{0}'</value>
  </data>
  <data name="ZeroBufferSize" xml:space="preserve">
    <value>Current buffer size is zero</value>
  </data>
  <data name="ItemAlreadyExists" xml:space="preserve">
    <value>Item '{0}' already exists in the buffer</value>
  </data>
  <data name="NewItemDuplicatesTheLastOne" xml:space="preserve">
    <value>New item duplicates the last one in the buffer</value>
  </data>
  <data name="RemovingDuplicatedItem" xml:space="preserve">
    <value>Removing duplicated item</value>
  </data>
  <data name="BufferWillExceedItsSize" xml:space="preserve">
    <value>Buffer will exceed its size (count: {0}, current size: {1})</value>
    <comment>0 is items count, 1 is buffer size</comment>
  </data>
  <data name="SavingItem" xml:space="preserve">
    <value>Saving item</value>
  </data>
  <data name="ClearingBuffer" xml:space="preserve">
    <value>Clearing the buffer</value>
  </data>
  <data name="ChangingBufferSize" xml:space="preserve">
    <value>Changing buffer size from {0} to {1}</value>
    <comment>0 is current size, 1 is new size</comment>
  </data>
  <data name="NeedToShrunkBuffer" xml:space="preserve">
    <value>Buffer needs to be shrunk</value>
  </data>
  <data name="CheckingKeyExistance" xml:space="preserve">
    <value>Checking existance of key '{0}'</value>
    <comment>0 is key path</comment>
  </data>
  <data name="NotExists" xml:space="preserve">
    <value>Doesn't exist</value>
  </data>
  <data name="Exists" xml:space="preserve">
    <value>Exists</value>
  </data>
  <data name="SettingItems" xml:space="preserve">
    <value>Setting list of items</value>
  </data>
  <data name="ShrinkingBuffer" xml:space="preserve">
    <value>Shrinking buffer to {0} items</value>
    <comment>0 is new buffer size</comment>
  </data>
  <data name="NoBufferInRegistry" xml:space="preserve">
    <value>Buffer doesn't exist in the registry</value>
  </data>
  <data name="CreatingOrOpeningSubkey" xml:space="preserve">
    <value>Creating and opening subkey '{0}' for key '{1}'</value>
    <comment>0 is subkey path, 1 is key itself</comment>
  </data>
  <data name="SendingShellNotification" xml:space="preserve">
    <value>Sending shell notification</value>
  </data>
  <data name="CurrentUICulture" xml:space="preserve">
    <value>Current UI culture is {0}</value>
  </data>
  <data name="CurrentCulture" xml:space="preserve">
    <value>Current culture is {0}</value>
  </data>
</root>